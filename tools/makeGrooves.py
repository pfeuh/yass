#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys

PATTERN = """void YASS_SEQUENCER::#METHOD_NAME#()
{
    // This code is generated by tools/makeGrooves.py
    switch(getLenghtMode(currentSeq))
    {
        case YASS_SEQUENCE_GATE_SHORT:
            switch(tickNum)
            {
#SHORT_CASES#                    stopCurrentNote();
                    break;
                default:
                    break;
            }
            break;
        case YASS_SEQUENCE_GATE_NORMAL:
            switch(tickNum)
            {
#NORMAL_CASES#                    stopCurrentNote();
                    break;
                default:
                    break;
            }
            break;
        case YASS_SEQUENCE_GATE_LONG:
            switch(tickNum)
            {
#LONG_CASES#                    stopCurrentNote();
                    break;
                default:
                    break;
            }
            break;
        default:
            break;
    }
    
    switch(tickNum)
    {
#NOTE_ON_CASES#            stepTask();
            break;
        default:
            break;
    }
}

"""
YASS_RESOLUTION = 24

SHORT = 50
NORMAL = 70
LONG = 90

STATE_NOIRE               = "stateNoire"               
STATE_CROCHE              = "stateCroche"              
STATE_TRIOLETCROCHE       = "stateTrioletCroche"       
STATE_CROCHESWING         = "stateCrocheSwing"         
STATE_DOUBLECROCHE        = "stateDoubleCroche"        
STATE_TRIOLETDOUBLECROCHE = "stateTrioletDoubleCroche" 
STATE_DOUBLECROCHESWING   = "stateDoubleCrocheSwing"   

KEYS = [
    STATE_NOIRE,
    STATE_CROCHE,
    STATE_TRIOLETCROCHE,
    STATE_CROCHESWING,
    STATE_DOUBLECROCHE,
    STATE_TRIOLETDOUBLECROCHE,
    STATE_DOUBLECROCHESWING,]


DATA = {
    STATE_NOIRE               :[0],
    STATE_CROCHE              :[0, YASS_RESOLUTION / 2],
    STATE_TRIOLETCROCHE       :[0, YASS_RESOLUTION / 3, YASS_RESOLUTION / 3 * 2],
    STATE_CROCHESWING         :[0, YASS_RESOLUTION / 3 * 2],
    STATE_DOUBLECROCHE        :[0, YASS_RESOLUTION / 4, YASS_RESOLUTION / 4 * 2, YASS_RESOLUTION / 4 * 3],
    STATE_TRIOLETDOUBLECROCHE :[0, YASS_RESOLUTION / 6,YASS_RESOLUTION / 6 * 2,YASS_RESOLUTION / 6 * 3,YASS_RESOLUTION / 6 * 4,YASS_RESOLUTION / 6 * 5],
    STATE_DOUBLECROCHESWING   :[0, YASS_RESOLUTION / 6 * 2,YASS_RESOLUTION / 6 * 3,YASS_RESOLUTION / 6 * 5]}

LABELS = {
    STATE_NOIRE               :"1/4",
    STATE_CROCHE              :"1/8",
    STATE_TRIOLETCROCHE       :"1/12",
    STATE_CROCHESWING         :"1/8 swing",
    STATE_DOUBLECROCHE        :"1/16",
    STATE_TRIOLETDOUBLECROCHE :"1/24",
    STATE_DOUBLECROCHESWING   :"1/24 swing"}

def computeTickStop(percent, index, tick_starts):
    starts = tick_starts[:] + [YASS_RESOLUTION]
    duration = float(starts[index+1] - tick_starts[index]) * float(percent) / 100.00
    tick_stop = float(starts[index]) + duration
    tick_stop = int(tick_stop + 0.5) 
    if tick_stop == starts[index+1]:
        tick_stop = tick_stop - 1
    return tick_stop

code = ""

report  = "/*\n+-----------------------------------+\n"
report += "|          | tick |    tick stop    |\n"
report += "|Groove    | start|short normal long|\n"
report += "|----------+------+------+-----+----|\n"
for key in KEYS:
    report += "|%-10s|      |      |     |    |\n"%LABELS[key]
    
    methods_code = PATTERN[:]
    tick_starts = DATA[key]
    
    # methode name
    methods_code = methods_code.replace("#METHOD_NAME#", key)
    
    #methode note on
    note_on_cases = ["        case %s:\n"%ticknum for ticknum in tick_starts]
    methods_code = methods_code.replace("#NOTE_ON_CASES#", "".join(note_on_cases))
    
    #method note off long
    short_cases = []
    normal_cases = []
    long_cases = []
    cells = []
    for data in [(SHORT, "#SHORT_CASES#", short_cases), (NORMAL, "#NORMAL_CASES#", normal_cases), (LONG, "#LONG_CASES#", long_cases)]:
        percent = data[0]
        word = data[1]
        cases_list = data[2]
        stop_values = []
        for index in range(len(tick_starts)):
            tick_start = tick_starts[index]
            if index >= len(cells):
                cells.append([tick_start])
            tick_stop = computeTickStop(percent, index, tick_starts)
            cases_list.append("                case %s:\n"%tick_stop)
            cells[index].append(tick_stop)
            #~ print key, percent, tick_start, tick_stop
        methods_code = methods_code.replace(word, "".join(cases_list))
    for cell in cells:
        report += "|          |  %2u  |  %2u  | %2u  | %2u |\n"%(cell[0], cell[1], cell[2], cell[3])
    report += "|----------+------+------+-----+----|\n"

    code += methods_code
code = report + "*/\n\n" + code
print code






